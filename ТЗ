Техническое задание (ТЗ) для игры "Office Crusher"

1. Общая информация
Название проекта: Office Crusher
Жанр: Аркадный экшен
Платформы: ПК
Целевая аудитория: Подростки и взрослые 12+

2. Описание проекта
Office Crusher — это игра с видом сверху, в которой игрок управляет офисным работником, целью которого является разрушение офисной мебели и перемещение по офису, преодолевая уровни с различными препятствиями. Игра представляет собой аркадный шутер на клеточном поле, в котором доступны два типа оружия: лом и пистолет.

3. Представление игры
В игре предусмотрены три основных окна:
Меню начала игры
В меню игрок может:
Сохранить текущую игру (запись в базу данных информации об очках, времени, названии уровня и т.д.).
Загрузить предыдущее сохранение (чтение информации из базы данных).
Выйти из игры, используя специальную кнопку, а не крестик.
Экран уровня
Игра представлена на клеточном поле, где персонаж может перемещаться и взаимодействовать с объектами.
У персонажа есть лом и пистолет. При ходьбе в определённом направлении происходит атака с помощью выбранного оружия.
Лом ломает мебель за один удар.
Пистолет требует два удара для разрушения мебели, что обеспечивает баланс в игре.
Экран окончания уровня
После завершения уровня игрок видит экран с подсчетом очков и времени.
В игре предусмотрено три уровня, отличающихся по следующим параметрам:
Количеству мебели на карте.
Размеру самой карты.

4. Архитектура игры
Главный класс: Office_Crusher
Ядро игры, управление игровым процессом: инициализация классов, управление игровым циклом, обработка событий.
Класс Board
Ответственный за всю карту: управление элементами карты, их расположение и состояние.
Классы внутри Board:
Player
Управление персонажем: обработка движения и взаимодействий, реализация механики столкновений.
Entity
Базовый класс для всех объектов, с которыми может взаимодействовать игрок (мебель, NPC и т.д.): определение общих атрибутов и методов.
Wall
Класс для стен и препятствий: определяет физику взаимодействия, например, блокирование движения игрока.
Bullet
Логика выстрелов: хранит координаты, скорость, методы для обработки столкновений с объектами на карте.

5. Основные механики
Сохранение игры: Реализация механизма сохранения текущего состояния игры.
Загрузка игры: Возможность загружать ранее сохраненные состояния.
Движение (ходьба): Управление движением игрока по карте.
Удары по мебели: Взаимодействие игрока с мебелью (разрушение, перемещение и т.д.).
Выстрелы из оружия: Управление стрельбой, реализация механики попадания в цели.

6. Распределение обязанностей
Григорий Беликов:
Тимлид, автор идеи, художник, ответственный за разработку структуры игры и совмещение работ классов. Ответственный за дизайн игровых уровней и интерфейса.
Роман Юданов:
Бэкэнд разработчик. Ответственный за разработку логики игры, класса Board, обработку механик, сохранение и загрузку игры.
Артём Родюков:
Фронтэнд разработчик. Ответственный за визуализацию игры, анимации, отрисовку объектов, а также реализацию интерфейса пользователя.

7. Используемые инструменты
Язык программирования: Python версии 3.12.
Библиотеки и зависимости:
Pygame (для работы с графикой и звуком)
Git (для версионного контроля кода, ведение репозитория на GitHub)
